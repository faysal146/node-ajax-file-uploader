{"version":3,"sources":["src/utils.js","src/views.js","src/http.js","src/app.js","src/index.js"],"names":["vaildType","type","test","converMillsecond","millsecond","minutes","Math","floor","seconds","toFixed","icons","image","pdf","video","text","cancle","complete","uploadFileItem","bindCancle","name","trim","length","substr","fillItemErrorAlert","progessBar","fileName","percent","document","querySelector","style","width","innerHTML","uploadCounter","time","onCancleButtonClick","callBack","cancleBtn","eventHnd","addEventListener","removeEventListener","uploadComplete","showError","message","serverAlert","classList","add","setTimeout","remove","cancleUpload","el","duplicatFileAlert","removeDuplicatFileAlert","querySelectorAll","forEach","dataset","event","e","httpUpload","HTTPUpload","file","url","uploaded","formData","FormData","append","http","XMLHttpRequest","open","_url","onloadstart","_handleLoadStart","upload","onprogress","_handleOnProgress","onload","_handleOnLoad","onerror","_handleError","onabort","_handleAbort","send","uploading","abort","yetToUpload","total","loaded","timeTaken","Date","now","_now","willTaken","round","status","Uploader","fileItemContainerEl","alertContainerEl","state","files","error","onFileInput","bind","filesArry","Object","keys","values","reduce","fileObj","acc","size","fileAlreadyUploaded","renderUploadFile","handleUploadFile","renderDuplicatFileAlert","fileItemsEle","rendered","insertAdjacentHTML","key","newError","errorFiles","removeFileError","fileItemContainer","alertContainer","fileUploadInput","fileUploadArea","uploader","target","dataTransfer","dragStart","dragEnd","eventName","evt","preventDefault","stopPropagation","contains"],"mappings":"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","file":"src.b629814e.js","sourceRoot":"..\\client","sourcesContent":["export function vaildType(type) {\n   switch (true) {\n      case /^image.+/g.test(type):\n         return 'image';\n      case type === 'application/pdf':\n         return 'pdf';\n      case type === 'video/mp4':\n         return 'video';\n      case type === 'application/x-zip-compressed':\n         return 'zip';\n      default:\n         return 'text';\n   }\n}\n\nexport function converMillsecond(millsecond) {\n   const minutes = Math.floor(millsecond / 60000);\n   const seconds = ((millsecond % 60000) / 1000).toFixed(0);\n   return `${minutes} min ${seconds < 10 ? '0' : ''}${seconds} sec`;\n}\n","import image from '../icons/image-icon.svg';\nimport pdf from '../icons/pdf-icon.svg';\nimport video from '../icons/video-icon.svg';\nimport text from '../icons/text-icon.svg';\nimport cancle from '../icons/cancle-icon.svg';\nimport complete from '../icons/complete-icon.svg';\n\nconst icons = {\n   image,\n   pdf,\n   video,\n   text,\n   cancle,\n   complete,\n};\n\nexport function uploadFileItem({ name, type }, bindCancle) {\n   return `\n        <div class=\"uploader__file-item\" data-name=\"${name.trim()}\">\n            <div class=\"file-info\">\n                <div class=\"file-icon\">\n                <img src=\"${icons[type]}\" alt=\"video icon\" />\n                </div>\n                <div class=\"file-name\">${\n                   name.length > 20 ? name.substr(0, 18) + '...' : name\n                }</div>\n            </div>\n            <div class=\"uploader__file--progress\">\n                <div class=\"progess-bar\">\n                <div class=\"bar\"></div>\n                </div>\n                <div class=\"progess-status\">\n                <span class=\"time-left\">\n                    0 min 0 sec\n                </span>\n                <span class=\"uploaded\">\n                  0%\n                </span>\n                </div>\n            </div>\n            <div class=\"uploader__file--control\">\n                <button class=\"cancle-button\">\n                  <img src=\"${icons.cancle}\" alt=\"\" srcset=\"\" />\n                </button>\n            </div>\n        </div>\n    `;\n}\n\nexport function fillItemErrorAlert({ name, type }) {\n   return `\n      <div class=\"alert\" data-name=\"${name.trim()}\">\n         <div class=\"file-icon\">\n            <img src=\"${icons[type]}\" alt=\"video icon\" />\n         </div>\n         <div class=\"file-name\">\n            ${name.length > 10 ? `${name.substr(0, 10)}..` : name}\n         </div>\n         <button class=\"cancle-button\">\n            <img src=\"${icons.cancle}\" alt=\"\" srcset=\"\" />\n         </button>\n      </div>\n   `;\n}\n\nexport function progessBar(fileName, percent) {\n   document.querySelector(\n      `[data-name=\"${fileName}\"] .bar`\n   ).style.width = `${percent}%`;\n   document.querySelector(\n      `[data-name=\"${fileName}\"] .uploaded`\n   ).innerHTML = `${percent}%`;\n}\n\nexport function uploadCounter(fileName, time) {\n   document.querySelector(\n      `[data-name=\"${fileName}\"] .time-left`\n   ).innerHTML = `${time}`;\n}\n\nexport function onCancleButtonClick(fileName, callBack) {\n   const cancleBtn = document.querySelector(\n      `[data-name=\"${fileName}\"] .cancle-button`\n   );\n\n   const eventHnd = cancleBtn.addEventListener('click', () => {\n      cancleBtn.removeEventListener('click', eventHnd);\n      callBack();\n   });\n}\n\nexport function uploadComplete(fileName) {\n   document.querySelector(\n      `[data-name=\"${fileName}\"] .uploader__file--control`\n   ).innerHTML = `\n             <div class=\"complete\">\n                <img src='${icons.complete}' alt='' srcset='' />\n             </div>\n          `;\n}\n\nexport function showError(message) {\n   const serverAlert = document.querySelector('.server-error-alert');\n   serverAlert.classList.add('show-alert');\n   serverAlert.innerHTML = message;\n   setTimeout(() => {\n      serverAlert.innerHTML = '';\n      serverAlert.classList.remove('show-alert');\n   }, 4000);\n}\nexport function cancleUpload(fileName) {\n   const el = document.querySelector(`[data-name=\"${fileName}\"]`);\n   el.classList.add('remove-file');\n   setTimeout(() => el.remove(), 500);\n}\n\nexport function duplicatFileAlert({ name, type }) {\n   return `\n      <div class=\"alert\" data-name=\"${name.trim()}\">\n         <div class=\"file-icon\">\n            <img src=\"${icons[type]}\" alt=\"video icon\" />\n         </div>\n         <div class=\"file-name\">\n            ${name.length > 10 ? `${name.substr(0, 10)}..` : name}\n         </div>\n         <button class=\"cancle-button\">\n            <img src=\"${icons['cancle']}\" alt=\"\" srcset=\"\" />\n         </button>\n      </div>\n   `;\n}\n\nexport function removeDuplicatFileAlert(name) {\n   document.querySelectorAll('.alert').forEach((el) => {\n      if (name) name === el.dataset.name && el.remove();\n      const event = el.addEventListener('click', (e) => {\n         el.removeEventListener('click', event);\n         el.classList.add('remove-file');\n         setTimeout(() => el.remove(), 300);\n      });\n   });\n}\n","import { converMillsecond } from './utils';\nimport {\n   cancleUpload,\n   uploadComplete,\n   progessBar,\n   showError,\n   onCancleButtonClick,\n   uploadCounter,\n} from './views';\n\nclass HTTPUpload {\n   constructor(file, url = '/upload') {\n      this._url = url;\n      this.file = file;\n      this._now = Date.now();\n   }\n\n   static httpUpload = (file, url) => {\n      return new HTTPUpload(file, url).http();\n   };\n\n   http = () => {\n      if (this.file.uploaded) return;\n\n      const formData = new FormData();\n      formData.append('file', this.file);\n\n      this.http = new XMLHttpRequest();\n      this.http.open('POST', this._url);\n      this.http.onloadstart = this._handleLoadStart;\n      this.http.upload.onprogress = this._handleOnProgress;\n      this.http.onload = this._handleOnLoad;\n      this.http.onerror = this._handleError;\n      this.http.onabort = this._handleAbort;\n      this.http.send(formData);\n   };\n   _handleLoadStart = () => {\n      this.file.uploading = true;\n      const abort = () => this.http.abort();\n      onCancleButtonClick(this.file.name, abort);\n   };\n\n   _handleOnProgress = (e) => {\n      const { name } = this.file;\n      const yetToUpload = e.total - e.loaded;\n      const timeTaken = Date.now() - this._now;\n      const willTaken = (yetToUpload / e.loaded) * timeTaken;\n\n      const uploaded = Math.round((e.loaded * 100) / e.total);\n\n      progessBar(name, uploaded);\n\n      uploadCounter(name, converMillsecond(willTaken));\n   };\n\n   _handleAbort = () => {\n      cancleUpload(this.file.name);\n   };\n\n   _handleOnLoad = () => {\n      if (this.http.status === 200) {\n         uploadComplete(this.file.name);\n         this.file.uploaded = true;\n         this.file.uploading = false;\n      } else this.http.onerror('some things went wrong');\n   };\n\n   _handleError = () => {\n      showError('something went wrong');\n   };\n}\n\nexport default HTTPUpload.httpUpload;\n","import httpUpload from './http';\nimport {\n   uploadFileItem,\n   duplicatFileAlert,\n   removeDuplicatFileAlert,\n} from './views';\nimport { vaildType } from './utils';\n\nclass Uploader {\n   constructor(fileItemContainerEl, alertContainerEl) {\n      this.fileItemContainerEl = fileItemContainerEl;\n      this.alertContainerEl = alertContainerEl;\n      this.state = {\n         files: {},\n         error: {},\n      };\n      this.onFileInput = this.onFileInput.bind(this);\n   }\n\n   fileAlreadyUploaded(filesArry) {\n      if (Object.keys(this.state.files).length === 0) {\n         this.state = Object.values(filesArry).reduce(\n            (fileObj, file) => {\n               fileObj.files[file.name] = file;\n               fileObj.error = {};\n               return fileObj;\n            },\n            { ...this.state }\n         );\n      } else {\n         this.state = Object.values(filesArry).reduce(\n            (acc, file) => {\n               if (\n                  file.name in this.state.files &&\n                  this.state.files[file.name].size === file.size\n               ) {\n                  acc.error[file.name] = file;\n               } else {\n                  acc.files[file.name] = file;\n               }\n               return acc;\n            },\n            { ...this.state }\n         );\n      }\n      return this;\n   }\n\n   onFileInput(files) {\n      this.fileAlreadyUploaded(files)\n         .renderUploadFile(this.fileItemContainerEl)\n         .handleUploadFile(httpUpload)\n         .renderDuplicatFileAlert(this.alertContainerEl);\n   }\n\n   handleUploadFile(http) {\n      const url = 'http://localhost:2000/upload';\n      Object.values(this.state.files).forEach((file) => {\n         if (!file.uploaded && !file.uploading) {\n            http(file, url);\n         }\n      });\n      return this;\n   }\n\n   renderUploadFile(fileItemsEle) {\n      Object.values(this.state.files).forEach((file) => {\n         if (!file.rendered) {\n            fileItemsEle.insertAdjacentHTML(\n               'beforeend',\n               uploadFileItem({\n                  name: file.name,\n                  type: vaildType(file.type),\n               })\n            );\n            file.rendered = true;\n         }\n      });\n      return this;\n   }\n\n   removeFileError(key) {\n      const newError = {};\n      if (!key) {\n         this.state.error = {};\n      }\n      Object.keys(this.state.error).forEach((file) => {\n         if (key !== file) {\n            newError[file] = this.state.error[file];\n         }\n      });\n      this.state.error = newError;\n   }\n\n   renderDuplicatFileAlert(alertContainerEl) {\n      const errorFiles = Object.values(this.state.error);\n      if (errorFiles.length < 1) return;\n      errorFiles.forEach((el) => {\n         alertContainerEl.insertAdjacentHTML(\n            'beforeend',\n            duplicatFileAlert({\n               name: el.name,\n               type: vaildType(el.type),\n            })\n         );\n         setTimeout(() => {\n            removeDuplicatFileAlert(el.name);\n            this.removeFileError(el.name);\n         }, 5000);\n      });\n      removeDuplicatFileAlert();\n      this.removeFileError();\n   }\n}\nexport default Uploader;\n","import Uploader from './app';\n\nconst fileItemContainer = document.querySelector('.uploader__file');\nconst alertContainer = document.querySelector('.alert-container');\nconst fileUploadInput = document.querySelector('#file-input');\nconst fileUploadArea = document.querySelector('#file-upload');\n\nconst uploader = new Uploader(fileItemContainer, alertContainer);\n\n// take files by input\nfileUploadInput.addEventListener('input', (e) => {\n   uploader.onFileInput(e.target.files);\n});\n\n// take files by darg and drop\nfileUploadArea.addEventListener('drop', (e) => {\n   uploader.onFileInput(e.dataTransfer.files);\n});\n\nconst dragStart = ['dragenter', 'dragover'];\nconst dragEnd = ['dragleave', 'drop'];\n\n[...dragEnd, ...dragStart].forEach((eventName) => {\n   fileUploadArea.addEventListener(eventName, (evt) => {\n      evt.preventDefault();\n      evt.stopPropagation();\n   });\n});\n\ndragEnd.forEach((eventName) => {\n   fileUploadArea.addEventListener(\n      eventName,\n      () => {\n         if (fileUploadArea.classList.contains('highlight')) {\n            fileUploadArea.classList.remove('highlight');\n         }\n      },\n      false\n   );\n});\n\ndragStart.forEach((eventName) => {\n   fileUploadArea.addEventListener(\n      eventName,\n      () => {\n         if (!fileUploadArea.classList.contains('highlight')) {\n            fileUploadArea.classList.add('highlight');\n         }\n      },\n      false\n   );\n});\n"]}